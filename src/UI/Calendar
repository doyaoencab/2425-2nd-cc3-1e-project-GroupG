package com.mycompany.employeemanagementsystemgui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

public class CalendarFrame {
    private static int currentMonth = 0; // January = 0
    private static final int YEAR = 2025;
    private static Map<String, String> events = new HashMap<>(); // To store events
    private static int selectedDay = -1; // To track selected day
    private static JLabel selectedLabel = null; // To store reference to the selected date's JLabel

    public static void main(String[] args) {
        JFrame frame = new JFrame("Calendar");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 550);
        frame.setLocationRelativeTo(null);
        frame.setLayout(new BorderLayout());

        JLabel monthLabel = new JLabel("", SwingConstants.CENTER);
        monthLabel.setFont(new Font("SansSerif", Font.BOLD, 18));

        JPanel panel = new JPanel(new GridLayout(7, 7));
        panel.setPreferredSize(new Dimension(480, 480));

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton prevButton = new JButton("<");
        JButton nextButton = new JButton(">");

        topPanel.add(prevButton);
        topPanel.add(monthLabel);
        topPanel.add(nextButton);

        frame.add(topPanel, BorderLayout.NORTH);
        frame.add(panel, BorderLayout.CENTER);

        JButton addEventButton = new JButton("Add Event");

        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        bottomPanel.add(addEventButton);

        frame.add(bottomPanel, BorderLayout.SOUTH);

        ActionListener updateCalendar = e -> {
            panel.removeAll();
            Calendar calendar = Calendar.getInstance();
            calendar.set(YEAR, currentMonth, 1);

            // Set month label
            String[] monthNames = {
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            };
            monthLabel.setText(monthNames[currentMonth] + " " + YEAR);

            // Add day-of-week headers
            String[] days = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
            for (String day : days) {
                JLabel label = new JLabel(day, SwingConstants.CENTER);
                label.setFont(new Font("SansSerif", Font.BOLD, 14));
                panel.add(label);
            }

            int firstDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK); // 1 = Sunday
            int daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

            // Add blank spaces before the first day
            for (int i = 1; i < firstDayOfWeek; i++) {
                panel.add(new JLabel(""));
            }

            // Add day numbers
            for (int day = 1; day <= daysInMonth; day++) {
                JLabel label = new JLabel(String.valueOf(day), SwingConstants.CENTER);
                label.setOpaque(true);
                label.setBackground(Color.WHITE);
                label.setBorder(BorderFactory.createLineBorder(Color.GRAY));

                // If there is an event for this day, display it
                if (events.containsKey(String.valueOf(day))) {
                    label.setText(label.getText() + " - " + events.get(String.valueOf(day)));
                }

                final int dayOfMonth = day;
                label.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent e) {
                        // If another day was already selected, revert its color
                        if (selectedLabel != null) {
                            selectedLabel.setBackground(Color.WHITE);
                        }

                        selectedDay = dayOfMonth; // Set selected day
                        selectedLabel = label; // Store the reference to the selected label
                        label.setBackground(Color.GRAY); // Highlight the selected day
                    }
                });

                panel.add(label);
            }

            // Fill the rest of the grid
            int totalCells = 42;
            int filled = (firstDayOfWeek - 1) + daysInMonth;
            for (int i = filled; i < totalCells; i++) {
                panel.add(new JLabel(""));
            }

            panel.revalidate();
            panel.repaint();
        };

        // Initial calendar display
        updateCalendar.actionPerformed(null);

        // Button actions
        prevButton.addActionListener(e -> {
            if (currentMonth > 0) {
                currentMonth--;
                updateCalendar.actionPerformed(null);
            }
        });

        nextButton.addActionListener(e -> {
            if (currentMonth < 11) {
                currentMonth++;
                updateCalendar.actionPerformed(null);
            }
        });

        // Add Event Button ActionListener - opens dialog to enter event details
        addEventButton.addActionListener(e -> {
            if (selectedDay == -1) {
                JOptionPane.showMessageDialog(frame, "Please select a day to add an event.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Create a new dialog to input event details
            JDialog eventDialog = new JDialog(frame, "Add Event", true);
            eventDialog.setSize(300, 200);
            eventDialog.setLocationRelativeTo(frame);

            JPanel dialogPanel = new JPanel(new GridLayout(3, 2));

            JLabel dateLabel = new JLabel("Date: " + selectedDay + " " + monthLabel.getText().split(" ")[0]);
            JTextField eventField = new JTextField();
            JButton saveButton = new JButton("Save Event");
            saveButton.setPreferredSize(new Dimension(100, 30)); // Set size of saveButton

            dialogPanel.add(dateLabel);
            dialogPanel.add(new JLabel()); // Empty label for layout
            dialogPanel.add(new JLabel("Event Details:"));
            dialogPanel.add(eventField);
            dialogPanel.add(saveButton);

            eventDialog.add(dialogPanel, BorderLayout.CENTER);
            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
            buttonPanel.add(saveButton);
            eventDialog.add(buttonPanel, BorderLayout.SOUTH);

            eventDialog.setVisible(true);

            // Save event button
            saveButton.addActionListener(ev -> {
                String eventDetails = eventField.getText();
                if (eventDetails.isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "Please enter event details.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    events.put(String.valueOf(selectedDay), eventDetails);
                    updateCalendar.actionPerformed(null);
                    eventDialog.dispose(); // Close the dialog after saving
                }
            });
        });

        frame.setVisible(true);
    }
}
