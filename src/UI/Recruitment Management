package com.mycompany.employeemanagementsystemgui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.jdatepicker.impl.*;

import java.util.Properties;

public class RecruitmentManagement extends JFrame {
    private DefaultTableModel tableModel;
    private JTable recruitmentTable;
    private final String DATABASE_FILE = "recruitmentData.json"; // JSON file for recruitment data

    public RecruitmentManagement() {
        setTitle("Employee Recruitment Management");
        setSize(600, 500);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE); // Only closes this frame
        setLocationRelativeTo(null);

        tableModel = new DefaultTableModel(new String[]{"Employee Name", "Position", "Interview Date", "Status"}, 0);
        recruitmentTable = new JTable(tableModel);
        add(new JScrollPane(recruitmentTable), BorderLayout.CENTER);

        // Load recruitment data from JSON
        loadRecruitmentData();

        JPanel buttonPanel = new JPanel();
        JButton addBtn = new JButton("Add Recruitment");
        JButton editBtn = new JButton("Edit Recruitment");
        JButton deleteBtn = new JButton("Delete Recruitment");

        buttonPanel.add(addBtn);
        buttonPanel.add(editBtn);
        buttonPanel.add(deleteBtn);
        add(buttonPanel, BorderLayout.SOUTH);

        addBtn.addActionListener(e -> openRecruitmentForm(false, -1));
        editBtn.addActionListener(e -> {
            int selectedRow = recruitmentTable.getSelectedRow();
            if (selectedRow >= 0) {
                openRecruitmentForm(true, selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Please select a recruitment entry to edit.");
            }
        });

        deleteBtn.addActionListener(e -> {
            int row = recruitmentTable.getSelectedRow();
            if (row >= 0) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this recruitment entry?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    tableModel.removeRow(row);
                    saveRecruitmentData(); // Save changes to JSON
                    JOptionPane.showMessageDialog(this, "Recruitment entry deleted.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a recruitment entry to delete.");
            }
        });
    }

    private void openRecruitmentForm(boolean isEdit, int rowIndex) {
        JFrame formFrame = new JFrame(isEdit ? "Edit Recruitment" : "Add Recruitment");
        formFrame.setSize(450, 300);
        formFrame.setLocationRelativeTo(this);

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JTextField nameField = new JTextField();
        JTextField positionField = new JTextField();

        UtilDateModel dateModel = new UtilDateModel();
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        JDatePanelImpl datePanel = new JDatePanelImpl(dateModel, p);
        JDatePickerImpl datePicker = new JDatePickerImpl(datePanel, new RecruitmentDateFormatter());

        String[] statusOptions = {"N/A", "Hired", "Not Hired"};
        JComboBox<String> statusBox = new JComboBox<>(statusOptions);

        if (isEdit && rowIndex >= 0) {
            nameField.setText((String) tableModel.getValueAt(rowIndex, 0));
            positionField.setText((String) tableModel.getValueAt(rowIndex, 1));
            String dateStr = (String) tableModel.getValueAt(rowIndex, 2);
            try {
                java.util.Date parsedDate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse(dateStr);
                dateModel.setValue(parsedDate);
            } catch (Exception e) {
                e.printStackTrace();
            }
            statusBox.setSelectedItem((String) tableModel.getValueAt(rowIndex, 3));
        }

        JButton saveButton = new JButton("Save");
        saveButton.setPreferredSize(new Dimension(100, 30));

        // Layout setup
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new JLabel("Employee Name:"), gbc);
        gbc.gridx = 1;
        panel.add(nameField, gbc);

        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new JLabel("Position:"), gbc);
        gbc.gridx = 1;
        panel.add(positionField, gbc);

        gbc.gridx = 0; gbc.gridy = 2;
        panel.add(new JLabel("Interview Date:"), gbc);
        gbc.gridx = 1;
        panel.add(datePicker, gbc);

        gbc.gridx = 0; gbc.gridy = 3;
        panel.add(new JLabel("Status:"), gbc);
        gbc.gridx = 1;
        panel.add(statusBox, gbc);

        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        panel.add(saveButton, gbc);

        formFrame.add(panel);
        formFrame.setVisible(true);

        saveButton.addActionListener(e -> {
            String name = nameField.getText();
            String position = positionField.getText();
            String interviewDate = datePicker.getJFormattedTextField().getText();
            String status = (String) statusBox.getSelectedItem();

            if (!name.isEmpty() && !position.isEmpty() && !interviewDate.isEmpty()) {
                if (isEdit) {
                    tableModel.setValueAt(name, rowIndex, 0);
                    tableModel.setValueAt(position, rowIndex, 1);
                    tableModel.setValueAt(interviewDate, rowIndex, 2);
                    tableModel.setValueAt(status, rowIndex, 3);
                    JOptionPane.showMessageDialog(this, "Recruitment entry updated.");
                } else {
                    tableModel.addRow(new Object[]{name, position, interviewDate, status});
                }
                saveRecruitmentData(); // Save to JSON
                formFrame.dispose();
            } else {
                JOptionPane.showMessageDialog(formFrame, "Please fill in all fields.");
            }
        });
    }

    private void loadRecruitmentData() {
        try {
            Gson gson = new Gson();
            FileReader reader = new FileReader(DATABASE_FILE);
            List<String[]> recruitmentData = gson.fromJson(reader, new TypeToken<List<String[]>>(){}.getType());
            reader.close();

            if (recruitmentData != null) {
                for (String[] entry : recruitmentData) {
                    tableModel.addRow(entry);
                }
            }
        } catch (Exception e) {
            //System.out.println("No recruitment data found, starting fresh.");
        }
    }

    private void saveRecruitmentData() {
        try {
            Gson gson = new Gson();
            FileWriter writer = new FileWriter(DATABASE_FILE);
            List<String[]> recruitmentData = new ArrayList<>();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String name = (String) tableModel.getValueAt(i, 0);
                String position = (String) tableModel.getValueAt(i, 1);
                String interviewDate = (String) tableModel.getValueAt(i, 2);
                String status = (String) tableModel.getValueAt(i, 3);
                recruitmentData.add(new String[]{name, position, interviewDate, status});
            }
            gson.toJson(recruitmentData, writer);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new RecruitmentManagement().setVisible(true));
    }
}

// Date formatter class
class RecruitmentDateFormatter extends JFormattedTextField.AbstractFormatter {
    private final java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("yyyy-MM-dd");

    @Override
    public Object stringToValue(String text) throws java.text.ParseException {
        return dateFormatter.parseObject(text);
    }

    @Override
    public String valueToString(Object value) {
        if (value != null) {
            java.util.Calendar cal = (java.util.Calendar) value;
            return dateFormatter.format(cal.getTime());
        }
        return "";
    }
}
