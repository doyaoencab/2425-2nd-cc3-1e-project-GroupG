package com.mycompany.employeemanagementsystemgui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class EmployeeManagement extends JFrame {
    private DefaultTableModel tableModel;
    private JTable table;
    private final String DATABASE_FILE = "employeeData.json"; // JSON file for employee data

    public EmployeeManagement() {
        // JFrame setup
        setTitle("Employee Management");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null); // Center the frame on the screen

        // Table setup
        tableModel = new DefaultTableModel(new String[]{"ID", "Name", "Position"}, 0);
        table = new JTable(tableModel);
        add(new JScrollPane(table), BorderLayout.CENTER);

        // Load employee data from JSON
        loadEmployeeData();

        // Button Panel setup with Add, Update, and Delete
        JPanel buttonPanel = new JPanel();
        JButton addBtn = new JButton("Add");
        JButton updateBtn = new JButton("Update");
        JButton deleteBtn = new JButton("Delete");
        buttonPanel.add(addBtn);
        buttonPanel.add(updateBtn);
        buttonPanel.add(deleteBtn);
        add(buttonPanel, BorderLayout.SOUTH);

        // Add button actions
        addBtn.addActionListener(e -> openAddEmployeeFrame());
        updateBtn.addActionListener(e -> openUpdateEmployeeFrame());
        deleteBtn.addActionListener(e -> {
            int row = table.getSelectedRow();
            if (row >= 0) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this employee?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    tableModel.removeRow(row);
                    saveEmployeeData(); // Save to JSON
                    JOptionPane.showMessageDialog(this, "Employee deleted.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select an employee to delete.");
            }
        });

        setVisible(true); // Make the JFrame visible
    }

    private void openAddEmployeeFrame() {
        JFrame addFrame = new JFrame("Add Employee");
        addFrame.setSize(300, 200);
        addFrame.setLocationRelativeTo(this);

        JPanel panel = new JPanel(new GridLayout(4, 2));
        JTextField idField = new JTextField();
        JTextField nameField = new JTextField();
        JTextField positionField = new JTextField();
        JButton saveButton = new JButton("Save");

        panel.add(new JLabel("ID:"));
        panel.add(idField);
        panel.add(new JLabel("Name:"));
        panel.add(nameField);
        panel.add(new JLabel("Position:"));
        panel.add(positionField);
        panel.add(new JLabel());
        panel.add(saveButton);

        addFrame.add(panel);
        addFrame.setVisible(true);

        saveButton.addActionListener(e -> {
            String id = idField.getText().trim();
            String name = nameField.getText().trim();
            String position = positionField.getText().trim();
            if (!id.isEmpty() && !name.isEmpty() && !position.isEmpty()) {
                tableModel.addRow(new String[]{id, name, position});
                saveEmployeeData(); // Save to JSON
                addFrame.dispose();
            } else {
                JOptionPane.showMessageDialog(addFrame, "Please fill all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    private void openUpdateEmployeeFrame() {
        int row = table.getSelectedRow();
        if (row >= 0) {
            String id = (String) tableModel.getValueAt(row, 0);
            String name = (String) tableModel.getValueAt(row, 1);
            String position = (String) tableModel.getValueAt(row, 2);

            JFrame updateFrame = new JFrame("Update Employee");
            updateFrame.setSize(300, 200);
            updateFrame.setLocationRelativeTo(this);

            JPanel panel = new JPanel(new GridLayout(4, 2));
            JTextField idField = new JTextField(id);
            JTextField nameField = new JTextField(name);
            JTextField positionField = new JTextField(position);
            JButton saveButton = new JButton("Save");

            panel.add(new JLabel("ID:"));
            panel.add(idField);
            panel.add(new JLabel("Name:"));
            panel.add(nameField);
            panel.add(new JLabel("Position:"));
            panel.add(positionField);
            panel.add(new JLabel());
            panel.add(saveButton);

            updateFrame.add(panel);
            updateFrame.setVisible(true);

            saveButton.addActionListener(e -> {
                String newId = idField.getText().trim();
                String newName = nameField.getText().trim();
                String newPosition = positionField.getText().trim();
                if (!newId.isEmpty() && !newName.isEmpty() && !newPosition.isEmpty()) {
                    tableModel.setValueAt(newId, row, 0);
                    tableModel.setValueAt(newName, row, 1);
                    tableModel.setValueAt(newPosition, row, 2);
                    saveEmployeeData(); // Save to JSON
                    updateFrame.dispose();
                } else {
                    JOptionPane.showMessageDialog(updateFrame, "Please fill all fields.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            });
        } else {
            JOptionPane.showMessageDialog(this, "Please select an employee to update.", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loadEmployeeData() {
        try {
            Gson gson = new Gson();
            FileReader reader = new FileReader(DATABASE_FILE);
            List<String[]> employees = gson.fromJson(reader, new TypeToken<List<String[]>>(){}.getType());
            reader.close();
            if (employees != null) {
                for (String[] employee : employees) {
                    tableModel.addRow(employee);
                }
            }
        } catch (Exception e) {
            //System.out.println("No employee data found, starting fresh.");

        }
    }

    private void saveEmployeeData() {
        try {
            Gson gson = new Gson();
            FileWriter writer = new FileWriter(DATABASE_FILE);
            List<String[]> employees = new ArrayList<>();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String id = (String) tableModel.getValueAt(i, 0);
                String name = (String) tableModel.getValueAt(i, 1);
                String position = (String) tableModel.getValueAt(i, 2);
                employees.add(new String[]{id, name, position});
            }
            gson.toJson(employees, writer);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new EmployeeManagement());
    }
}
