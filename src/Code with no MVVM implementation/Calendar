package com.mycompany.employeemanagementsystemgui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class CalendarFrame extends JFrame {
    private static int currentMonth = 0; // January = 0
    private static final int YEAR = 2025;
    private static Map<String, String> events = new HashMap<>(); // Store events as day-month
    private static int selectedDay = -1; // Selected day
    private static JLabel selectedLabel = null; // Reference to selected date label
    private Map<String, JLabel> dayLabels = new HashMap<>(); // Map to track day labels for highlighting
    private final String DATABASE_FILE = "calendarEvents.json"; // JSON file for persistent storage

    public CalendarFrame() {
        setTitle("Calendar");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(500, 550);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        JLabel monthLabel = new JLabel("", SwingConstants.CENTER);
        monthLabel.setFont(new Font("SansSerif", Font.BOLD, 18));

        JPanel panel = new JPanel(new GridLayout(7, 7));
        panel.setPreferredSize(new Dimension(480, 480));

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton prevButton = new JButton("<");
        JButton nextButton = new JButton(">");

        topPanel.add(prevButton);
        topPanel.add(monthLabel);
        topPanel.add(nextButton);

        add(topPanel, BorderLayout.NORTH);
        add(panel, BorderLayout.CENTER);

        JButton addEventButton = new JButton("Add Event");
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        bottomPanel.add(addEventButton);
        add(bottomPanel, BorderLayout.SOUTH);

        // Load events from JSON file
        loadEvents();

        ActionListener updateCalendar = e -> {
            panel.removeAll();
            dayLabels.clear(); // Clear previous day labels
            Calendar calendar = Calendar.getInstance();
            calendar.set(YEAR, currentMonth, 1);

            String[] monthNames = {
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            };
            monthLabel.setText(monthNames[currentMonth] + " " + YEAR);

            String[] days = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
            for (String day : days) {
                JLabel label = new JLabel(day, SwingConstants.CENTER);
                label.setFont(new Font("SansSerif", Font.BOLD, 14));
                panel.add(label);
            }

            int firstDayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
            int daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

            for (int i = 1; i < firstDayOfWeek; i++) {
                panel.add(new JLabel(""));
            }

            for (int day = 1; day <= daysInMonth; day++) {
                JLabel label = new JLabel(String.valueOf(day), SwingConstants.CENTER);
                label.setOpaque(true);
                label.setBackground(Color.WHITE);
                label.setBorder(BorderFactory.createLineBorder(Color.GRAY));

                String eventKey = day + "-" + currentMonth;
                if (events.containsKey(eventKey)) {
                    String eventDetails = events.get(eventKey);
                    label.setText(label.getText() + " *");
                    label.setToolTipText(eventDetails);
                    label.setBackground(Color.RED); // Highlight day with event
                }

                final int dayOfMonth = day;
                label.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mousePressed(java.awt.event.MouseEvent e) {
                        if (selectedLabel != null) {
                            selectedLabel.setBackground(Color.WHITE);
                            if (events.containsKey(selectedDay + "-" + currentMonth)) {
                                selectedLabel.setBackground(Color.YELLOW); // Restore yellow for event days
                            }
                        }
                        selectedDay = dayOfMonth;
                        selectedLabel = label;
                        label.setBackground(Color.GRAY);
                    }

                    public void mouseClicked(java.awt.event.MouseEvent e) {
                        if (e.getClickCount() == 2) {
                            String eventKey = dayOfMonth + "-" + currentMonth;
                            if (events.containsKey(eventKey)) {
                                JOptionPane.showMessageDialog(CalendarFrame.this,
                                        "Event for " + dayOfMonth + " " + monthLabel.getText() + ":\n" + events.get(eventKey),
                                        "Event Details", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(CalendarFrame.this,
                                        "No event for this day.",
                                        "Event Details", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    }
                });

                panel.add(label);
                dayLabels.put(day + "-" + currentMonth, label); // Track day label for updates
            }

            int totalCells = 42;
            int filled = (firstDayOfWeek - 1) + daysInMonth;
            for (int i = filled; i < totalCells; i++) {
                panel.add(new JLabel(""));
            }

            panel.revalidate();
            panel.repaint();
        };

        updateCalendar.actionPerformed(null);

        prevButton.addActionListener(e -> {
            if (currentMonth > 0) {
                currentMonth--;
                updateCalendar.actionPerformed(null);
            }
        });

        nextButton.addActionListener(e -> {
            if (currentMonth < 11) {
                currentMonth++;
                updateCalendar.actionPerformed(null);
            }
        });

        addEventButton.addActionListener(e -> {
            if (selectedDay == -1) {
                JOptionPane.showMessageDialog(this, "Please select a day to add an event.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JDialog eventDialog = new JDialog(this, "Add Event", true);
            eventDialog.setSize(300, 200);
            eventDialog.setLocationRelativeTo(this);

            JPanel dialogPanel = new JPanel(new GridLayout(3, 2));
            JLabel dateLabel = new JLabel("Date: " + selectedDay + " " + monthLabel.getText().split(" ")[0]);
            JTextField eventField = new JTextField();
            JButton saveButton = new JButton("Save Event");
            saveButton.setPreferredSize(new Dimension(100, 30));

            dialogPanel.add(dateLabel);
            dialogPanel.add(new JLabel()); // empty space
            dialogPanel.add(new JLabel("Event Details:"));
            dialogPanel.add(eventField);

            eventDialog.add(dialogPanel, BorderLayout.CENTER);

            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
            buttonPanel.add(saveButton);
            eventDialog.add(buttonPanel, BorderLayout.SOUTH);

            saveButton.addActionListener(ev -> {
                String eventDetails = eventField.getText();
                if (eventDetails.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please enter event details.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    String eventKey = selectedDay + "-" + currentMonth;
                    events.put(eventKey, eventDetails);

                    if (dayLabels.containsKey(eventKey)) {
                        JLabel dayLabel = dayLabels.get(eventKey);
                        dayLabel.setBackground(Color.YELLOW); // Highlight day when event is added
                        dayLabel.setToolTipText(eventDetails); // Update tooltip
                    }

                    saveEvents(); // Save events to JSON file
                    updateCalendar.actionPerformed(null);
                    eventDialog.dispose();
                }
            });

            eventDialog.setVisible(true);
        });
    }

    private void loadEvents() {
        try {
            Gson gson = new Gson();
            FileReader reader = new FileReader(DATABASE_FILE);
            events = gson.fromJson(reader, new TypeToken<Map<String, String>>() {}.getType());
            reader.close();
        } catch (Exception e) {
            //System.out.println("No existing events found. Starting fresh.");
            events = new HashMap<>();
        }
    }

    private void saveEvents() {
        try {
            Gson gson = new Gson();
            FileWriter writer = new FileWriter(DATABASE_FILE);
            gson.toJson(events, writer);
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
